{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["data","level","locations","name","stock","product","qty","replenishment","App","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","category","handleChange","bind","assertThisInitialized","event","setState","target","value","react_default","a","createElement","className","App_Checkbox","onChange","App_Table","Component","Table","_this$props","map","item","key","loc","goods","Checkbox","type","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAGMA,SACJ,CACE,CACEC,MAAQ,EACRC,UAAY,CACV,CACEC,KAAO,WACPC,MAAQ,CACN,CACEC,QAAU,YACVC,IAAM,IACNC,cAAgB,YAM1B,CACEN,MAAQ,EACRC,UAAY,CACV,CACEC,KAAO,WACPC,MAAQ,CACN,CACEC,QAAU,IACVC,IAAM,EACNC,cAAgB,OAItB,CACEJ,KAAO,WACPC,MAAQ,CACN,CACEC,QAAU,kBACVC,IAAM,EACNC,cAAgB,YAM1B,CACEN,MAAQ,EACRC,UAAY,CACV,CACEC,KAAO,WACPC,MAAQ,CACN,CACEC,QAAU,mBACVC,IAAM,EACNC,cAAgB,cAItB,CACEJ,KAAO,WACPC,MAAQ,CACN,CACEC,QAAU,QACVC,IAAM,GACNC,cAAgB,kBAUxBC,cACJ,SAAAA,EAAYC,EAAOC,GAAS,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IAC1BG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAML,EAAOC,KAERQ,MAAQ,CACXlB,OACAmB,SAAU,WAGZR,EAAKS,aAAeT,EAAKS,aAAaC,KAAlBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KARMA,4EAYbY,GACTT,KAAKU,SAAS,CAACL,SAAUI,EAAME,OAAOC,yCAInC,IAEAP,EAAYL,KAAKI,MAAjBC,SACP,OACEQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAlB,eAGAH,EAAAC,EAAAC,cAACE,EAAD,CACEL,MAAOP,EACPa,SAAUlB,KAAKM,eAEjBO,EAAAC,EAAAC,cAACI,EAAD,CACEjC,KAAMA,YA/BEkC,aAsCZC,mLACK,IAAAC,EACmBtB,KAAKL,MAArBT,EADHoC,EACGpC,KADHoC,EACSV,MAKd,OAEEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,qBAEFF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,mBACG7B,EAAKqC,IAAI,SAAAC,GAAI,OACdX,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASS,IAAKD,EAAKrC,OAAQqC,EAAKrC,UAElD0B,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,sBACG7B,EAAKqC,IAAI,SAAAC,GAAI,OACdA,EAAKpC,UAAUmC,IAAI,SAAAG,GAAG,OACtBb,EAAAC,EAAAC,cAAA,UAAKW,EAAIrC,WAEbwB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,mBACG7B,EAAKqC,IAAI,SAAAC,GAAI,OACdA,EAAKpC,UAAUmC,IAAI,SAAAG,GAAG,OACtBA,EAAIpC,MAAMiC,IAAI,SAAAI,GAAK,OACnBd,EAAAC,EAAAC,cAAA,UAAKY,EAAMpC,gBAIfsB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,sBACG7B,EAAKqC,IAAI,SAAAC,GAAI,OACdA,EAAKpC,UAAUmC,IAAI,SAAAG,GAAG,OACtBA,EAAIpC,MAAMiC,IAAI,SAAAI,GAAK,OACnBd,EAAAC,EAAAC,cAAA,UAAKY,EAAMnC,YAEfqB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,2BACG7B,EAAKqC,IAAI,SAAAC,GAAI,OACdA,EAAKpC,UAAUmC,IAAI,SAAAG,GAAG,OACtBA,EAAIpC,MAAMiC,IAAI,SAAAI,GAAK,OACnBd,EAAAC,EAAAC,cAAA,UAAKY,EAAMlC,gCA/CP2B,aAwDdQ,mLAEF,OACEf,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOc,KAAK,WAAWxC,KAAK,YAAYuB,MAAM,YAD9C,IACiEC,EAAAC,EAAAC,cAAA,8CAJhDK,aAYR1B,ICxKKoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5481e7ea.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst data = \n  [\n    {\n      \"level\":1,\n      \"locations\":[\n        {\n          \"name\":\"VZ-01-01\",\n          \"stock\":[\n            {\n              \"product\":\"Left door\",\n              \"qty\":100,\n              \"replenishment\":\"slow\"\n            }\n          ]\n        }\n      ]\n    },\n    {\n      \"level\":2,\n      \"locations\":[\n        {\n          \"name\":\"VZ-01-02\",\n          \"stock\":[\n            {\n              \"product\":\" \",\n              \"qty\":0,\n              \"replenishment\":\" \"\n            }\n          ]\n        },\n        {\n          \"name\":\"VZ-02-02\",\n          \"stock\":[\n            {\n              \"product\":\"Rear brake disk\",\n              \"qty\":3,\n              \"replenishment\":\"fast\"\n            }\n          ]\n        }\n      ]\n    },\n    {\n      \"level\":3,\n      \"locations\":[\n        {\n          \"name\":\"VZ-01-03\",\n          \"stock\":[\n            {\n              \"product\":\"Front brake disk\",\n              \"qty\":2,\n              \"replenishment\":\"standard\"\n            }\n          ]\n        },\n        {\n          \"name\":\"VZ-01-04\",\n          \"stock\":[\n            {\n              \"product\":\"Shock\",\n              \"qty\":10,\n              \"replenishment\":\"standard\"\n            }\n          ]\n        }\n      ]\n    }\n  ];\n\n\n\nclass App extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      data,\n      category: 'display',\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    }\n\n\n    handleChange(event) {\n        this.setState({category: event.target.value});\n      }\n\n  \n  render() {\n\n    const {category} = this.state;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n         Stock Table\n        </header>\n        <Checkbox\n          value={category}\n          onChange={this.handleChange}\n        ></Checkbox>\n        <Table\n          data={data}\n          ></Table>\n      </div>\n    );\n  }\n}\n\nclass Table extends Component {\n  render() {\n      const { data, value } = this.props;\n      if (value===('display')) {\n\n\n      }\n      return (\n       \n        <div>\n          <table>\n            <tbody>\n            <tr>\n              <td>Label:</td> \n            </tr>\n            <tr>\n              <td>Level</td>\n                {data.map(item =>\n                <td className=\"levels\" key={item.level}>{item.level}</td>)}\n            </tr>\n            <tr>\n              <td>Location</td>\n                {data.map(item =>\n                item.locations.map(loc =>\n                <td>{loc.name}</td>))}\n            </tr>\n            <tr>\n              <td>Stock</td>\n                {data.map(item =>\n                item.locations.map(loc =>\n                loc.stock.map(goods =>\n                <td>{goods.product}</td>)))}\n                  \n                \n            </tr>\n            <tr>\n              <td>Quantity</td>\n                {data.map(item =>\n                item.locations.map(loc =>\n                loc.stock.map(goods =>\n                <td>{goods.qty}</td>)))}\n            </tr>\n            <tr>\n              <td>Replenishment</td>\n                {data.map(item =>\n                item.locations.map(loc =>\n                loc.stock.map(goods =>\n                <td>{goods.replenishment}</td>)))}\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      )    \n  }\n}\n\nclass Checkbox extends Component {\n  render() {\n    return (\n      <div>\n      <input type=\"checkbox\" name=\"showstock\" value=\"display\"></input> <p>Display stock information</p>\n      </div>\n    )\n  }\n  \n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}